service: my-service
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 512
  timeout: 30
  environment:
    NODE_ENV: ${self:provider.stage}
    TABLE_NAME: ${self:service}-${self:provider.stage}-table
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.TABLE_NAME}"

functions:
  hello:
    handler: handler.hello
    events:
        - http:
            path: hello
            method: get
            cors: true
  
  createUser:
    handler: handler.createUser
    events:
        - http:
            path: users
            method: post
            cors: true
            authorizer:
              name: authorizerFunc
              resultTtlInSeconds: 300
    
  processQueue:
    handler: handler.processQueue
    events:
        - sqs:
            arn: "arn:aws:sqs:us-east-1:123456789:queue"
            batchSize: 10
            maximumBatchingWindowInSeconds: 5

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    
    MessageQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-queue
        VisibilityTimeout: 300

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-prune-plugin

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  prune:
    automatic: true
    number: 3